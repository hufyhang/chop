$ch.define("string",function(){"use strict";$$CHOP.string={},$$CHOP.string={build:function(a,b){if(0===arguments.length)throw new Error("$ch.string.build requires at least one pattern parameter.");if("object"==typeof b&&$$CHOP.isArray(b)===!1){var c=a.match(/{{.+?}}/g);$$CHOP.each(c,function(c){var d=new RegExp(c,"g"),e="";e=c.replace(/{/g,""),e=e.replace(/}/g,""),void 0!==b[e]&&(a=a.replace(d,b[e]))})}return a=a.replace(/\\{/g,"{"),a=a.replace(/\\}/g,"}")},buffer:function(a){var b={buffer:[],append:function(a){if(void 0!==a)if($$CHOP.isArray(a)){var b=this;$$CHOP.each(a,function(a){b.buffer.push(a)})}else this.buffer.push(a);return this},prepend:function(a){if(void 0!==a)if($$CHOP.isArray(a))for(var b=this,c=a.length-1,d=0;c>=d;--c)b.buffer.unshift(a[c]);else this.buffer.unshift(a);return this},dump:function(a){void 0===a&&(a="");var b=this.buffer.join(a);return this.buffer=[],b},toString:function(a){return void 0===a&&(a=""),this.buffer.join(a)}};return void 0!==a&&("object"==typeof a&&$$CHOP.isArray(a)?$$CHOP.each(a,function(a){b.append(a)}):b.append(a)),b}}});